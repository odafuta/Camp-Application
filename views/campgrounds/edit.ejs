<% layout('layouts/boilerplate') %>
<div class="row">
    <h1 class="text-center">キャンプ場の編集</h1>
    <div class="offset-md-3 col-md-6">
        <form action="/campgrounds/<%= campground._id %>?_method=PUT" method="POST" novalidate class="validated-form"
            enctype="multipart/form-data">
            <div class="mb-3">
                <label class="form-label" for="title">タイトル</label>
                <input class="form-control" type="text" name="campground[title]" id="title"
                    value="<%= campground.title %>" required>
                <div class="valid-feedback">
                    OK!
                </div>
            </div>
            <div class="mb-3">
                <label class="form-label" for="location">場所</label>
                <input class="form-control" type="text" name="campground[location]" id="location"
                    value="<%= campground.location %>" required>
                <div class="valid-feedback">
                    OK!
                </div>
            </div>
            <div class="mb-3">
                <label class="form-label" for="website">公式サイトURL（任意）</label>
                <input class="form-control" type="url" name="campground[website]" id="website" value="<%= campground.website || '' %>">
            </div>
            <div class="mb-3">
                <label class="form-label" for="price">価格</label>
                <div class="input-group">
                    <span class="input-group-text" id="price-label">¥</span>
                    <input type="number" class="form-control" id="price" placeholder="0" aria-label="価格"
                        aria-describedby="price-label" name="campground[price]" value="<%= campground.price %>"
                        required min="0" step="1">
                    <div class="valid-feedback">
                        OK!
                    </div>
                    <div class="invalid-feedback">
                        価格は0以上の数値で入力してください
                    </div>
                </div>
                <div id="price-error" class="text-danger mt-1" style="display: none;">
                    <small>価格は数値のみ入力してください（例：1000、1500）</small>
                </div>
            </div>
            <div class="mb-3">
                <label class="form-label" for="description">説明</label>
                <textarea class="form-control" type="text" name="campground[description]" id="description"
                    required><%= campground.description %></textarea>
                <div class="valid-feedback">
                    OK!
                </div>
            </div>
            <div class="mb-3">
                <label for="image" class="form-label">画像の追加アップロード</label>
                <input class="form-control" type="file" id="image" name="image" multiple>
            </div>
            <div class="mb-3">
                <% campground.images.forEach(function(img, i) { %>
                    <img src="<%= img.thumbnail %>" class="img-thumbnail" alt="">
                    <div class="form-check-inline">
                        <input type="checkbox" name="deleteImages[]" id="image-<%= i %>" value="<%= img.filename %>">
                    </div>
                    <label for="image-<%= i %>">削除する</label>
                <% }) %>
            </div>
            <div class="mb-3">
                <button class="btn btn-info" type="submit">更新する</button>
            </div>

        </form>
        <a href="/campgrounds">一覧に戻る</a>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const priceInput = document.getElementById('price');
    const priceError = document.getElementById('price-error');
    const form = document.querySelector('.validated-form');
    
    // リアルタイムバリデーション
    priceInput.addEventListener('input', function() {
        const value = this.value;
        
        // 空の場合はエラーを非表示
        if (value === '') {
            priceError.style.display = 'none';
            this.classList.remove('is-invalid');
            return;
        }
        
        // 数値でない場合、または負の数の場合
        if (isNaN(value) || parseFloat(value) < 0) {
            priceError.style.display = 'block';
            this.classList.add('is-invalid');
            this.classList.remove('is-valid');
        } else {
            priceError.style.display = 'none';
            this.classList.remove('is-invalid');
            this.classList.add('is-valid');
        }
    });
    
    // フォーム送信時のバリデーション
    form.addEventListener('submit', function(e) {
        const priceValue = priceInput.value;
        
        if (priceValue === '' || isNaN(priceValue) || parseFloat(priceValue) < 0) {
            e.preventDefault();
            priceError.style.display = 'block';
            priceInput.classList.add('is-invalid');
            priceInput.focus();
            return false;
        }
    });
});
</script>